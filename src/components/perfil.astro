---
import { supabaseServer } from "../db/supabaseServer.js";

// Renderiza s√≥lo si hay usuario (SSR)
const supabase = supabaseServer(Astro);
const { data: { user } } = await supabase.auth.getUser();
const isLoggedIn = !!user;
---

{isLoggedIn && (
  <>
    <!-- Bot√≥n para abrir el modal -->
    <button id="openProfileBtn" class="btn-profile" aria-label="Abrir mi perfil">
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16" aria-hidden="true">
        <path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4z"/>
      </svg>
    </button>

    <!-- Modal de Perfil -->
    <div id="profileModal" class="modal" role="dialog" aria-modal="true" aria-labelledby="modal-title">
      <div class="modal-content">
        <button id="closeModalBtn" class="btn-close" aria-label="Cerrar modal">&times;</button>
        <h2 id="modal-title" class="modal-title">Mi Perfil</h2>

        <div class="form-group">
          <label for="profileEmail" class="form-label">Email</label>
          <input type="email" id="profileEmail" class="form-input" readonly />
        </div>

        <div class="form-group">
          <label for="profileName" class="form-label">Nombre de usuario</label>
          <input type="text" id="profileName" class="form-input" placeholder="Ej. juan.perez" />
        </div>

        <div class="button-group">
          <button id="changePasswordBtn" class="btn btn-secondary">
            <span class="btn-icon">üîê</span><span>Cambiar Contrase√±a</span>
          </button>
          <button id="saveProfileBtn" class="btn btn-primary">
            <span class="btn-icon">üíæ</span><span>Guardar Cambios</span>
          </button>
          <button id="logoutBtn" class="btn btn-secondary">
            <span class="btn-icon">üö™</span><span>Cerrar sesi√≥n</span>
          </button>
        </div>
      </div>
    </div>

    <style>
      :root {
        --color-primary:#10b981; --color-primary-dark:#0d9488; --color-secondary:#6b7280;
        --color-white:#ffffff; --color-gray-100:#f9fafb; --color-gray-700:#374151; --color-gray-900:#111827;
        --shadow-sm:0 1px 3px rgba(0,0,0,0.1); --shadow-md:0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -1px rgba(0,0,0,0.06);
        --shadow-lg:0 10px 15px -3px rgba(0,0,0,0.1), 0 4px 6px -2px rgba(0,0,0,0.05);
        --radius-sm:6px; --radius-md:12px; --radius-lg:16px; --transition:all .2s ease;
        --font-sans:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,sans-serif;
      }

      .btn-profile{
        display:flex; align-items:center; justify-content:center; background-color:var(--color-primary);
        color:var(--color-white); border:none; width:44px; height:44px; border-radius:50%; cursor:pointer;
        box-shadow:var(--shadow-sm); transition:var(--transition); position:fixed; top:24px; right:24px; z-index:100; outline:none;
      }
      .btn-profile:hover{ background-color:var(--color-primary-dark); transform:scale(1.05); box-shadow:var(--shadow-md); }
      .btn-profile:focus{ box-shadow:0 0 0 3px rgba(16,185,129,.3) }

      .modal{ display:none; position:fixed; inset:0; background-color:rgba(0,0,0,.5); z-index:1000; animation:fadeIn .25s ease; }
      @keyframes fadeIn{ from{opacity:0} to{opacity:1} }

      .modal-content{
        position:relative; background:var(--color-white); width:90%; max-width:480px; margin:10% auto; padding:32px;
        border-radius:var(--radius-lg); box-shadow:var(--shadow-lg); animation:slideUp .3s ease; font-family:var(--font-sans);
        color:var(--color-gray-900);
      }
      @keyframes slideUp{ from{opacity:0; transform:translateY(20px)} to{opacity:1; transform:translateY(0)} }

      .btn-close{
        position:absolute; top:16px; right:16px; font-size:24px; font-weight:bold; background:none; border:none;
        color:#9ca3af; cursor:pointer; padding:4px; border-radius:50%; transition:var(--transition);
      }
      .btn-close:hover{ color:#374151; background-color:#f3f4f6 }

      .modal-title{ font-size:1.5rem; font-weight:600; margin:0 0 32px; text-align:center; color:var(--color-gray-900); letter-spacing:-.02em; }

      .form-group{ margin-bottom:24px }
      .form-label{ display:block; font-size:.875rem; font-weight:500; color:var(--color-gray-700); margin-bottom:8px; letter-spacing:.01em; }

      .form-input{
        width:100%; padding:12px 16px; font-size:1rem; border:1px solid #e5e7eb; border-radius:var(--radius-md);
        background-color:var(--color-white); color:var(--color-gray-900); transition:var(--transition); box-sizing:border-box; font-family:inherit;
      }
      .form-input:focus{ outline:none; border-color:var(--color-primary); box-shadow:0 0 0 3px rgba(16,185,129,.15) }
      .form-input::placeholder{ color:#9ca3af }

      .button-group{ display:flex; gap:16px; justify-content:center; margin-top:16px; flex-wrap:wrap; }
      .btn{
        display:flex; align-items:center; gap:8px; padding:12px 24px; font-size:.95rem; font-weight:500; border:none;
        border-radius:var(--radius-md); cursor:pointer; transition:var(--transition); font-family:inherit; min-width:160px; justify-content:center;
      }
      .btn-primary{ background-color:var(--color-primary); color:#fff; box-shadow:var(--shadow-sm) }
      .btn-primary:hover{ background-color:var(--color-primary-dark); transform:translateY(-1px); box-shadow:var(--shadow-md) }

      .btn-secondary{ background-color:var(--color-secondary); color:#fff; box-shadow:var(--shadow-sm) }
      .btn-secondary:hover{ background-color:#4b5563; transform:translateY(-1px); box-shadow:var(--shadow-md) }

      .btn-icon{ font-size:1.1em; display:inline-flex; align-items:center }

      @media (max-width:640px){
        .modal-content{ margin:20px; padding:24px }
        .button-group{ flex-direction:column }
        .btn{ min-width:auto }
      }
    </style>

    <script type="module">
      import { supabase } from "/src/db/supabase.js";

      const modal = document.getElementById('profileModal');
      const openBtn = document.getElementById('openProfileBtn');
      const closeBtn = document.getElementById('closeModalBtn');
      const saveBtn = document.getElementById('saveProfileBtn');
      const changePassBtn = document.getElementById('changePasswordBtn');
      const logoutBtn = document.getElementById('logoutBtn');
      const emailInput = document.getElementById('profileEmail');
      const nameInput = document.getElementById('profileName');

      let currentUserName = '';

      async function obtenerUsuario() {
        const { data, error } = await supabase.auth.getUser();
        if (error) { console.error("Error al obtener usuario:", error); return { user: null }; }
        return data;
      }

      async function cargarPerfil() {
        const { user } = await obtenerUsuario();
        if (!user) return;
        if (emailInput) emailInput.value = user.email || '';
        if (nameInput) {
          const savedName = (user.user_metadata && user.user_metadata.name) || '';
          nameInput.value = savedName;
          currentUserName = savedName;
        }
      }

      // ===== Opci√≥n A: actualizar las 3 tablas desde cliente =====
      async function guardarPerfil() {
        if (!nameInput) return;

        const newName = nameInput.value.trim();
        if (!newName) { alert("‚ö†Ô∏è El nombre no puede estar vac√≠o"); return; }

        const { user } = await obtenerUsuario();
        if (!user) { alert("No hay sesi√≥n"); return; }

        // 1) Actualiza metadata del usuario (auth)
        const { error: authError } = await supabase.auth.updateUser({ data: { name: newName } });
        if (authError) {
          alert("‚ùå Error al actualizar perfil: " + authError.message);
          return;
        }

        // 2) Cambios en BD en paralelo:
        //    - pulsador.usuario (donde == nombre anterior)
        //    - marcador.jugador (donde == nombre anterior)
        //    - profiles.display_name (por id del usuario)
        const tasks = [
          supabase.from('pulsador')
            .update({ usuario: newName })
            .eq('usuario', currentUserName),

          supabase.from('marcador')
            .update({ jugador: newName })
            .eq('jugador', currentUserName),

          supabase.from('profiles')
            .upsert(
              { id: user.id, display_name: newName },
              { onConflict: 'id' }
            )
        ];

        const results = await Promise.allSettled(tasks);

        const failed = results
          .map((r, i) => ({ i, r }))
          .filter(x => x.r.status === 'rejected' || (x.r.value && x.r.value.error));

        if (failed.length) {
          console.error('Fallos al renombrar en tablas:', failed);
          alert('‚ö†Ô∏è Se cambi√≥ el nombre, pero alguna tabla no se pudo actualizar. Revisa la consola.');
        } else {
          alert("‚úÖ ¬°Nombre actualizado en todas las tablas!");
          currentUserName = newName; // ahora este es el nombre ‚Äúanterior‚Äù
        }

        // 3) Si no exist√≠a en pulsador (usuario nuevo), crea el registro base
        const { data: existsRow, error: checkErr } = await supabase
          .from('pulsador')
          .select('id')
          .eq('usuario', newName)
          .maybeSingle();

        if (!existsRow && !checkErr) {
          await supabase.from('pulsador').insert({
            usuario: newName,
            activado: false,
            rol: 'user',
            created_at: new Date().toISOString()
          });
        }
      }

      async function cambiarContrasena() {
        const newPassword = prompt("üîë Ingresa tu nueva contrase√±a:");
        if (!newPassword) return;
        const { error } = await supabase.auth.updateUser({ password: newPassword });
        if (error) alert("‚ùå Error: " + error.message);
        else alert("‚úÖ ¬°Contrase√±a cambiada!");
      }

      // Cerrar sesi√≥n + sincronizar cookie SSR
      async function cerrarSesion() {
        await supabase.auth.signOut();
        await fetch('/api/auth', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ event: 'SIGNED_OUT', session: null })
        });
        window.location.replace('/');
      }

      // Abrir / cerrar modal
      openBtn?.addEventListener('click', () => { if (modal) { modal.style.display = 'block'; cargarPerfil(); } });
      closeBtn?.addEventListener('click', () => { if (modal) modal.style.display = 'none'; });
      window.addEventListener('click', (e) => { if (modal && e.target === modal) modal.style.display = 'none'; });

      // Acciones
      saveBtn?.addEventListener('click', guardarPerfil);
      changePassBtn?.addEventListener('click', cambiarContrasena);
      logoutBtn?.addEventListener('click', cerrarSesion);
    </script>
  </>
)}
