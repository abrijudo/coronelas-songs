---
/* Canciones — versión optimizada: una sola consulta, todo en memoria */
---
<!-- Preconnect ayuda a que cargue antes el embed -->
<link rel="preconnect" href="https://open.spotify.com">
<link rel="preconnect" href="https://i.scdn.co">

<div class="card">
  <h2 class="text-center mb-4">Canciones</h2>

  <div class="form-group">
    <select id="cancion-select" class="form-control">
      <option value="__ALL__" selected>Todos</option>
    </select>
  </div>

  <!-- Controles aleatorios -->
  <div class="random-row">
    <label for="rand-count" class="rand-label">Aleatorio del género actual</label>
    <div class="rand-input-wrap">
      <input id="rand-count" type="number" class="rand-input" min="1" value="2" />
      <button id="randBtn" class="btn rand-btn">Aleatorio</button>
    </div>
  </div>

  <div class="player-wrapper">
    <iframe
      id="spotify-iframe"
      src=""
      width="100%"
      height="185"
      frameborder="0"
      allowtransparency="true"
      allow="encrypted-media"
      class="spotify-iframe"
      loading="lazy"
      referrerpolicy="no-referrer-when-downgrade"
    ></iframe>
  </div>

  <div class="controls mt-3">
    <button id="prevBtn" class="btn">
      <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 64 64" class="icon">
        <path fill="currentColor" d="M54.6 4.2c-2.1-1.2-4.8-1.1-6.8.3L10.4 28.9V4c0-1.2-1-2.3-2.3-2.3S5.9 2.8 5.9 4v56c0 1.2 1 2.3 2.3 2.3s2.3-1 2.3-2.3V35.1l37.4 24.4c1.1.7 2.4 1.1 3.6 1.1c1.1 0 2.2-.3 3.2-.8c2.1-1.2 3.5-3.4 3.5-5.8V10c-.1-2.4-1.5-4.6-3.6-5.8m-1 49.8c0 1.1-.8 1.6-1.1 1.8c-.7.4-1.5.3-2.2-.1L13.9 32L50.3 8.3c.7-.4 1.5-.5 2.2-.1c.3.2 1.1.7 1.1 1.8z"/>
      </svg>
      <span>Anterior</span>
    </button>

    <button id="nextBtn" class="btn">
      <span>Siguiente</span>
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 48 48" class="icon">
        <path fill="currentColor" d="M39.5 7.25a1.25 1.25 0 0 1 2.5 0v33.5a1.25 1.25 0 1 1-2.5 0zM6 9.257v29.487c0 2.615 2.931 4.16 5.088 2.68l21.504-14.743c1.883-1.29 1.883-4.07 0-5.36L11.088 6.576C8.93 5.098 6 6.642 6 9.257m3.674-.618l21.504 14.743a.75.75 0 0 1 0 1.237L9.674 39.363a.75.75 0 0 1-1.174-.618V9.257a.75.75 0 0 1 1.174-.618"/>
      </svg>
    </button>
  </div>
</div>

<style>
  .player-wrapper{margin:1rem 0;border-radius:var(--border-radius);overflow:hidden}
  .spotify-iframe{border:none;display:block;width:100%;border-radius:var(--border-radius)}

  .controls{display:flex;justify-content:center;gap:1rem;margin-top:1rem}
  .btn{display:inline-flex;align-items:center;gap:.5rem;background-color:var(--primary-color);color:#fff;border:none;padding:.6rem 1.2rem;border-radius:var(--border-radius);cursor:pointer;transition:var(--transition)}
  .btn:hover{background-color:var(--accent-color);transform:translateY(-2px)}
  .btn:disabled{opacity:.6;cursor:not-allowed;transform:none}
  .icon{width:1.2rem;height:1.2rem}

  /* Select sin doble flecha */
  select.form-control{cursor:pointer;appearance:none;-webkit-appearance:none;-moz-appearance:none;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='14' height='14' viewBox='0 0 24 24' fill='none' stroke='%23111' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");background-repeat:no-repeat;background-position:right .9rem center;background-size:14px 14px;padding-right:2.5rem}
  select.form-control::-ms-expand{display:none}

  /* Aleatorio */
  .random-row{display:grid;gap:.5rem;margin:1rem 0 .5rem}
  .rand-label{font-weight:600;color:var(--text-color);margin-left:2px}
  .rand-input-wrap{display:flex;gap:.5rem;align-items:stretch}
  .rand-input{width:90px;border:1px solid #e5e7eb;border-radius:var(--border-radius);padding:.55rem .75rem;font-size:1rem;outline:none;transition:var(--transition)}
  .rand-input:focus{border-color:var(--primary-color);box-shadow:0 0 0 .2rem rgba(0,5,71,.08)}
  .rand-btn{white-space:nowrap;font-weight:600;padding-inline:1rem}
</style>

<script type="module">
  import { supabase } from "/src/db/supabase.js";

  const ALL = "__ALL__";

  // === Utilidad rápida para extraer ID de track ===
  function extractSpotifyTrackId(url){
    if(!url || typeof url!=="string") return null;
    // Evita parseo pesado cuando ya es embed/track/{id}
    const m = url.match(/\/track\/([a-zA-Z0-9]+)(?:[?#].*)?$/);
    return m ? m[1] : null;
  }

  // === Estructuras en memoria (1 sola carga) ===
  let allSongs = [];                // [{id, tipo}]
  const byType = new Map();         // tipo -> [{id, tipo}]
  let types = [];                   // ['Rock','Pop',...]

  // Estado UI
  let currentPool = [];             // referencia del género actual
  let playlist = [];
  let currentIndex = 0;

  // DOM
  const iframe   = document.getElementById("spotify-iframe");
  const prevBtn  = document.getElementById("prevBtn");
  const nextBtn  = document.getElementById("nextBtn");
  const selectEl = document.getElementById("cancion-select");
  const randBtn  = document.getElementById("randBtn");
  const randIn   = document.getElementById("rand-count");

  // === Selección aleatoria O(n) (baraja parcial) ===
  function pickN(arr, n){
    const a = arr.slice();
    n = Math.min(n, a.length);
    for (let i = 0; i < n; i++){
      const j = i + Math.floor(Math.random() * (a.length - i));
      [a[i], a[j]] = [a[j], a[i]];
    }
    return a.slice(0, n);
  }

  function syncButtons(){
    prevBtn.disabled = currentIndex <= 0;
    nextBtn.disabled = currentIndex >= playlist.length - 1;
  }

  function loadTrack(i){
    if (!playlist[i]) return;
    iframe.src = `https://open.spotify.com/embed/track/${playlist[i].id}?utm_source=generator`;
    currentIndex = i;
    syncButtons();
  }

  function setPlaylist(list){
    playlist = list;
    currentIndex = 0;
    if (playlist.length) loadTrack(0);
    else iframe.src = "";
  }

  // === Carga única de datos ===
  async function initData(){
    const { data, error } = await supabase
      .from("musica")
      .select("url, tipo, reproducir")
      .eq("reproducir", true);

    if (error){ console.error("Supabase:", error); return; }

    // Normaliza y crea índices
    allSongs = [];
    byType.clear();

    for (const row of (data || [])){
      const id = extractSpotifyTrackId(row.url);
      if (!id) continue;
      const tipo = row.tipo || "Otros";
      const song = { id, tipo };
      allSongs.push(song);
      if (!byType.has(tipo)) byType.set(tipo, []);
      byType.get(tipo).push(song);
    }

    types = Array.from(byType.keys()).sort();

    // Pinta el select (mantiene 'Todos' ya presente)
    for (const t of types){
      const opt = document.createElement("option");
      opt.value = t; opt.textContent = t;
      selectEl.appendChild(opt);
    }

    // Pool inicial: todos
    currentPool = allSongs;
    setPlaylist(currentPool);
  }

  // === Eventos UI ===
  nextBtn.addEventListener("click", () => {
    if (currentIndex < playlist.length - 1) loadTrack(currentIndex + 1);
  });
  prevBtn.addEventListener("click", () => {
    if (currentIndex > 0) loadTrack(currentIndex - 1);
  });

  selectEl.addEventListener("change", () => {
    const filtro = selectEl.value || ALL;
    currentPool = (filtro === ALL) ? allSongs : (byType.get(filtro) || []);
    setPlaylist(currentPool);
  });

  randBtn.addEventListener("click", () => {
    let n = parseInt(randIn.value, 10);
    if (!Number.isFinite(n) || n <= 0) n = 1;
    setPlaylist(pickN(currentPool, n));
  });

  // Init
  initData();
</script>
